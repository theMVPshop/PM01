{"ast":null,"code":"var _jsxFileName = \"/Users/acaclasswork/Documents/PM01/react/src/components/SetRoles.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Table, Container, Form, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SetRoles({\n  projects\n}) {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:4001/users/\").then(response => {\n      console.log(response.data);\n      setUsers(response.data);\n    });\n    axios.get(\"http://localhost:4001/permissions/\").then(response => {\n      console.log(response.data);\n      setPermissions(response.data);\n    });\n  }, []);\n\n  const handleClick = (isMod, username) => {\n    axios.post(\"http://localhost:4001/users/\", {\n      isModerator: !isMod,\n      username\n    }).then(() => {\n      axios.get(\"http://localhost:4001/users/\").then(response => {\n        setUsers(response.data);\n      });\n    });\n  };\n\n  const handleChangePermission = (e, project_id, username, permissionObject) => {\n    let permissionId = permissionObject && permissionObject.id;\n    e.target.checked ? axios.post(\"http://localhost:4001/permissions/\", {\n      username,\n      project_id\n    }).then(() => {\n      axios.get(\"http://localhost:4001/permissions/\").then(response => {\n        setPermissions(response.data);\n      });\n    }) : axios.delete(`http://localhost:4001/permissions/${permissionId}`).then(() => {\n      axios.get(\"http://localhost:4001/permissions/\").then(response => {\n        setPermissions(response.data);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Permissions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map((user, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: user.isModerator ? \"success\" : \"warning\",\n              onClick: () => handleClick(user.isModerator, user.username),\n              children: user.isModerator ? \"Moderator\" : \"Client\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [\"checkbox\"].map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: projects.map((project, idx) => {\n                  let permissionObject = permissions.find(x => x.username === user.username && x.project_id === project.id);\n                  return /*#__PURE__*/_jsxDEV(Form.Check, {\n                    inline: true,\n                    label: project.title,\n                    type: type,\n                    id: `inline-${type}-1`,\n                    checked: permissionObject // value={}\n                    ,\n                    onChange: e => handleChangePermission(e, project.id, user.username, permissionObject)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, `inline-${type}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SetRoles, \"W1XbQ0ze6sDGV0FI5dYooHpJgyE=\");\n\n_c = SetRoles;\nexport default SetRoles;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetRoles\");","map":{"version":3,"sources":["/Users/acaclasswork/Documents/PM01/react/src/components/SetRoles.js"],"names":["React","useEffect","useState","axios","Table","Container","Form","Button","SetRoles","projects","users","setUsers","permissions","setPermissions","get","then","response","console","log","data","handleClick","isMod","username","post","isModerator","handleChangePermission","e","project_id","permissionObject","permissionId","id","target","checked","delete","map","user","idx","type","project","find","x","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Table, Container, Form, Button } from \"react-bootstrap\";\n\nfunction SetRoles({ projects }) {\n  const [users, setUsers] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4001/users/\").then((response) => {\n      console.log(response.data);\n      setUsers(response.data);\n    });\n    axios.get(\"http://localhost:4001/permissions/\").then((response) => {\n      console.log(response.data);\n      setPermissions(response.data);\n    });\n  }, []);\n\n  const handleClick = (isMod, username) => {\n    axios\n      .post(\"http://localhost:4001/users/\", {\n        isModerator: !isMod,\n        username,\n      })\n      .then(() => {\n        axios.get(\"http://localhost:4001/users/\").then((response) => {\n          setUsers(response.data);\n        });\n      });\n  };\n\n  const handleChangePermission = (\n    e,\n    project_id,\n    username,\n    permissionObject\n  ) => {\n    let permissionId = permissionObject && permissionObject.id;\n    e.target.checked\n      ? axios\n          .post(\"http://localhost:4001/permissions/\", {\n            username,\n            project_id,\n          })\n          .then(() => {\n            axios.get(\"http://localhost:4001/permissions/\").then((response) => {\n              setPermissions(response.data);\n            });\n          })\n      : axios\n          .delete(`http://localhost:4001/permissions/${permissionId}`)\n          .then(() => {\n            axios.get(\"http://localhost:4001/permissions/\").then((response) => {\n              setPermissions(response.data);\n            });\n          });\n  };\n\n  return (\n    <Container>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th>Username</th>\n            <th>Role</th>\n            <th>Permissions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, idx) => (\n            <tr>\n              <td>{user.username}</td>\n              <td>\n                <Button\n                  variant={user.isModerator ? \"success\" : \"warning\"}\n                  onClick={() => handleClick(user.isModerator, user.username)}\n                >\n                  {user.isModerator ? \"Moderator\" : \"Client\"}\n                </Button>\n              </td>\n              <td>\n                <Form>\n                  {[\"checkbox\"].map((type) => (\n                    <div key={`inline-${type}`} className=\"mb-3\">\n                      {projects.map((project, idx) => {\n                        let permissionObject = permissions.find(\n                          (x) =>\n                            x.username === user.username &&\n                            x.project_id === project.id\n                        );\n\n                        return (\n                          <Form.Check\n                            inline\n                            label={project.title}\n                            type={type}\n                            id={`inline-${type}-1`}\n                            checked={permissionObject}\n                            // value={}\n                            onChange={(e) =>\n                              handleChangePermission(\n                                e,\n                                project.id,\n                                user.username,\n                                permissionObject\n                              )\n                            }\n                          />\n                        );\n                      })}\n                    </div>\n                  ))}\n                </Form>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default SetRoles;\n"]},"metadata":{},"sourceType":"module"}